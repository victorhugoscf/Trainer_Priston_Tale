unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, Winapi.TlHelp32, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;

type
  TForm1 = class(TForm)
    EditPID: TEdit;
    BtnAttach: TButton;
    EditValue1: TEdit;
    BtnApply: TButton;
    ProcessListBox: TListBox; // Usando TListBox para listar processos
    Label1: TLabel;
    Label2: TLabel;
    EditValue2: TEdit;
    Label3: TLabel;
    EditValue3: TEdit;
    Label4: TLabel;
    EditValue4: TEdit;
    search: TEdit;
    Label5: TLabel;
    Label6: TLabel;
    EditValeu5: TEdit;
    procedure FormCreate(Sender: TObject);
    procedure ProcessListBoxDblClick(Sender: TObject);
    procedure BtnAttachClick(Sender: TObject);
    procedure BtnApplyClick(Sender: TObject);
    procedure searchChange(Sender: TObject);
    procedure Label6Click(Sender: TObject);
    procedure EditValue4Change(Sender: TObject);
    procedure EditValeu5Change(Sender: TObject);
  private
    { Private declarations }
    FProcessHandle: THandle;
    procedure ListProcesses(const Filter: string = '');
    function OpenProcessByPID(PID: DWORD): THandle;
    procedure WriteMemory(Address: Pointer; const Buffer: TBytes);
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.FormCreate(Sender: TObject);
begin
  ListProcesses;
end;

procedure TForm1.Label6Click(Sender: TObject);
begin
  // Adicione aqui o código desejado para o evento Label6Click, se necessário
end;

procedure TForm1.ListProcesses(const Filter: string = '');
var
  Snapshot: THandle;
  ProcessEntry: TProcessEntry32;
  ProcessName: string;
begin
  ProcessListBox.Clear; // Limpa o conteúdo do TListBox

  Snapshot := CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
  if Snapshot = INVALID_HANDLE_VALUE then
  begin
    ShowMessage('Failed to create process snapshot. Error Code: ' + IntToStr(GetLastError));
    Exit;
  end;

  ProcessEntry.dwSize := SizeOf(ProcessEntry);
  if not Process32First(Snapshot, ProcessEntry) then
  begin
    ShowMessage('Failed to retrieve process list. Error Code: ' + IntToStr(GetLastError));
    CloseHandle(Snapshot);
    Exit;
  end;

  repeat
    ProcessName := ProcessEntry.szExeFile;
    // Filtra pelo nome do processo se o filtro não estiver vazio
    if (Filter = '') or (Pos(UpperCase(Filter), UpperCase(ProcessName)) > 0) then
    begin
      ProcessListBox.Items.Add(Format('%d: %s', [ProcessEntry.th32ProcessID, ProcessName]));
    end;
  until not Process32Next(Snapshot, ProcessEntry);

  CloseHandle(Snapshot);
end;

procedure TForm1.ProcessListBoxDblClick(Sender: TObject);
var
  PIDStr: string;
begin
  if ProcessListBox.ItemIndex >= 0 then
  begin
    PIDStr := Copy(ProcessListBox.Items[ProcessListBox.ItemIndex], 1, Pos(':', ProcessListBox.Items[ProcessListBox.ItemIndex]) - 1);
    EditPID.Text := Trim(PIDStr);
  end;
end;

procedure TForm1.searchChange(Sender: TObject);
begin
  ListProcesses(search.Text); // Atualiza a lista de processos com base no texto de busca
end;

procedure TForm1.BtnAttachClick(Sender: TObject);
var
  PID: DWORD;
begin
  if TryStrToInt(EditPID.Text, Integer(PID)) then
  begin
    FProcessHandle := OpenProcessByPID(PID);
    if FProcessHandle = 0 then
      ShowMessage('Erro ao tentar anexar ao processo. Error Code: ' + IntToStr(GetLastError))
    else
      ShowMessage('Anexado ao processo.');
  end
  else
    ShowMessage('PID inválido.');
end;

procedure TForm1.EditValeu5Change(Sender: TObject);
begin
  // Adicione aqui o código desejado para o evento EditValeu5Change, se necessário
end;

procedure TForm1.EditValue4Change(Sender: TObject);
begin
  // Adicione aqui o código desejado para o evento EditValue4Change, se necessário
end;

function TForm1.OpenProcessByPID(PID: DWORD): THandle;
begin
  Result := OpenProcess(PROCESS_VM_WRITE or PROCESS_VM_READ or PROCESS_VM_OPERATION, False, PID);
end;

procedure TForm1.BtnApplyClick(Sender: TObject);
var
  Address1, Address2, Address3, Address4, Address5: Pointer;
  Buffer1, Buffer2, Buffer3, Buffer4, Buffer5: TBytes;
  Written: SIZE_T;
begin
  if FProcessHandle = 0 then
  begin
    ShowMessage('Nenhum processo anexado.');
    Exit;
  end;

  // Endereços para alteração (substitua pelos endereços reais)
  Address1 := Pointer($00CC518C);
  Address2 := Pointer($00CC5524);
  Address3 := Pointer($00CC5894);
  Address4 := Pointer($00CC568C);
  Address5 := Pointer($00CC54AC); // Endereço para o novo valor

  // Valores para escrever
  Buffer1 := TBytes.Create(Byte(StrToIntDef(EditValue1.Text, 0)));
  Buffer2 := TBytes.Create(Byte(StrToIntDef(EditValue2.Text, 0)));
  Buffer3 := TBytes.Create(Byte(StrToIntDef(EditValue3.Text, 0)));
  Buffer4 := TBytes.Create(Byte(StrToIntDef(EditValue4.Text, 0)));
  Buffer5 := TBytes.Create(Byte(StrToIntDef(EditValeu5.Text, 0))); // Valor do novo Edit

  // Tenta escrever na memória e verifica se a operação foi bem-sucedida
  if WriteProcessMemory(FProcessHandle, Address1, @Buffer1[0], Length(Buffer1), Written) then
    ShowMessage('Ativado com sucesso.')
  else
    ShowMessage('Failed to write memory to Address1. Error Code: ' + IntToStr(GetLastError));

  if WriteProcessMemory(FProcessHandle, Address2, @Buffer2[0], Length(Buffer2), Written) then

  else
    ShowMessage('Failed to write memory to Address2. Error Code: ' + IntToStr(GetLastError));

  if WriteProcessMemory(FProcessHandle, Address3, @Buffer3[0], Length(Buffer3), Written) then

  else
    ShowMessage('Failed to write memory to Address3. Error Code: ' + IntToStr(GetLastError));

  if WriteProcessMemory(FProcessHandle, Address4, @Buffer4[0], Length(Buffer4), Written) then

  else
    ShowMessage('Failed to write memory to Address4. Error Code: ' + IntToStr(GetLastError));

  if WriteProcessMemory(FProcessHandle, Address5, @Buffer5[0], Length(Buffer5), Written) then

  else
    ShowMessage('Failed to write memory to Address5. Error Code: ' + IntToStr(GetLastError));
end;

procedure TForm1.WriteMemory(Address: Pointer; const Buffer: TBytes);
var
  Written: SIZE_T;
begin
  if not WriteProcessMemory(FProcessHandle, Address, @Buffer[0], Length(Buffer), Written) then
    ShowMessage('Erro ao ativar. Error Code: ' + IntToStr(GetLastError));
end;

end.

